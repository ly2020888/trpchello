//
// This file was generated by trpc_cpp_plugin which is a self-defined pb compiler plugin, do not edit it!!!
// All rights reserved by Tencent Corporation
//

#include "university.trpc.pb.h"

#include "trpc/server/rpc_async_method_handler.h"
#include "trpc/server/rpc_method_handler.h"

namespace trpc {
namespace university {
namespace stu {

static const std::vector<std::vector<std::string_view>> University_method_names = {
  {"/trpc.university.stu.University/Ping"},
  {"/trpc.university.stu.University/GetEnvelopment"},
  {"/trpc.university.stu.University/PutEnvelopment"},
};

University::University() {
  for (const std::string_view& method : University_method_names[0]) {
    AddRpcServiceMethod(new ::trpc::RpcServiceMethod(method.data(), ::trpc::MethodType::UNARY, new ::trpc::RpcMethodHandler<::trpc::university::stu::PingMessage, ::trpc::university::stu::PingMessage>(std::bind(&University::Ping, this, std::placeholders::_1, std::placeholders::_2, std::placeholders::_3))));
  }
  for (const std::string_view& method : University_method_names[1]) {
    AddRpcServiceMethod(new ::trpc::RpcServiceMethod(method.data(), ::trpc::MethodType::UNARY, new ::trpc::RpcMethodHandler<::trpc::university::stu::Envelopment, ::trpc::university::stu::Envelopment>(std::bind(&University::GetEnvelopment, this, std::placeholders::_1, std::placeholders::_2, std::placeholders::_3))));
  }
  for (const std::string_view& method : University_method_names[2]) {
    AddRpcServiceMethod(new ::trpc::RpcServiceMethod(method.data(), ::trpc::MethodType::UNARY, new ::trpc::RpcMethodHandler<::trpc::university::stu::Envelopment, ::trpc::university::stu::Envelopment>(std::bind(&University::PutEnvelopment, this, std::placeholders::_1, std::placeholders::_2, std::placeholders::_3))));
  }
}

::trpc::Status University::Ping(::trpc::ServerContextPtr context, const ::trpc::university::stu::PingMessage* request, ::trpc::university::stu::PingMessage* response) {
  (void)context;
  (void)request;
  (void)response;
  return ::trpc::Status(-1, "");
}

::trpc::Status University::GetEnvelopment(::trpc::ServerContextPtr context, const ::trpc::university::stu::Envelopment* request, ::trpc::university::stu::Envelopment* response) {
  (void)context;
  (void)request;
  (void)response;
  return ::trpc::Status(-1, "");
}

::trpc::Status University::PutEnvelopment(::trpc::ServerContextPtr context, const ::trpc::university::stu::Envelopment* request, ::trpc::university::stu::Envelopment* response) {
  (void)context;
  (void)request;
  (void)response;
  return ::trpc::Status(-1, "");
}

AsyncUniversity::AsyncUniversity() : ::trpc::AsyncRpcServiceImpl() {
  for (const std::string_view& method : University_method_names[0]) {
    AddRpcServiceMethod(new ::trpc::RpcServiceMethod(method.data(), ::trpc::MethodType::UNARY, new ::trpc::AsyncRpcMethodHandler<::trpc::university::stu::PingMessage, ::trpc::university::stu::PingMessage>(std::bind(&AsyncUniversity::Ping, this, std::placeholders::_1, std::placeholders::_2))));
  }
  for (const std::string_view& method : University_method_names[1]) {
    AddRpcServiceMethod(new ::trpc::RpcServiceMethod(method.data(), ::trpc::MethodType::UNARY, new ::trpc::AsyncRpcMethodHandler<::trpc::university::stu::Envelopment, ::trpc::university::stu::Envelopment>(std::bind(&AsyncUniversity::GetEnvelopment, this, std::placeholders::_1, std::placeholders::_2))));
  }
  for (const std::string_view& method : University_method_names[2]) {
    AddRpcServiceMethod(new ::trpc::RpcServiceMethod(method.data(), ::trpc::MethodType::UNARY, new ::trpc::AsyncRpcMethodHandler<::trpc::university::stu::Envelopment, ::trpc::university::stu::Envelopment>(std::bind(&AsyncUniversity::PutEnvelopment, this, std::placeholders::_1, std::placeholders::_2))));
  }
}

::trpc::Future<::trpc::university::stu::PingMessage> AsyncUniversity::Ping(const ::trpc::ServerContextPtr& context, const ::trpc::university::stu::PingMessage* request) {
  return ::trpc::MakeExceptionFuture<::trpc::university::stu::PingMessage>(::trpc::CommonException("Unimplemented"));
}

::trpc::Future<::trpc::university::stu::Envelopment> AsyncUniversity::GetEnvelopment(const ::trpc::ServerContextPtr& context, const ::trpc::university::stu::Envelopment* request) {
  return ::trpc::MakeExceptionFuture<::trpc::university::stu::Envelopment>(::trpc::CommonException("Unimplemented"));
}

::trpc::Future<::trpc::university::stu::Envelopment> AsyncUniversity::PutEnvelopment(const ::trpc::ServerContextPtr& context, const ::trpc::university::stu::Envelopment* request) {
  return ::trpc::MakeExceptionFuture<::trpc::university::stu::Envelopment>(::trpc::CommonException("Unimplemented"));
}

::trpc::Status UniversityServiceProxy::Ping(const ::trpc::ClientContextPtr& context, const ::trpc::university::stu::PingMessage& request, ::trpc::university::stu::PingMessage* response) {
  if (context->GetFuncName().empty()) context->SetFuncName(University_method_names[0][0].data());
  return UnaryInvoke<::trpc::university::stu::PingMessage, ::trpc::university::stu::PingMessage>(context, request, response);
}

::trpc::Status UniversityServiceProxy::GetEnvelopment(const ::trpc::ClientContextPtr& context, const ::trpc::university::stu::Envelopment& request, ::trpc::university::stu::Envelopment* response) {
  if (context->GetFuncName().empty()) context->SetFuncName(University_method_names[1][0].data());
  return UnaryInvoke<::trpc::university::stu::Envelopment, ::trpc::university::stu::Envelopment>(context, request, response);
}

::trpc::Status UniversityServiceProxy::PutEnvelopment(const ::trpc::ClientContextPtr& context, const ::trpc::university::stu::Envelopment& request, ::trpc::university::stu::Envelopment* response) {
  if (context->GetFuncName().empty()) context->SetFuncName(University_method_names[2][0].data());
  return UnaryInvoke<::trpc::university::stu::Envelopment, ::trpc::university::stu::Envelopment>(context, request, response);
}

::trpc::Future<::trpc::university::stu::PingMessage> UniversityServiceProxy::AsyncPing(const ::trpc::ClientContextPtr& context, const ::trpc::university::stu::PingMessage& request) {
  if (context->GetFuncName().empty()) context->SetFuncName(University_method_names[0][0].data());
  return AsyncUnaryInvoke<::trpc::university::stu::PingMessage, ::trpc::university::stu::PingMessage>(context, request);
}

::trpc::Future<::trpc::university::stu::Envelopment> UniversityServiceProxy::AsyncGetEnvelopment(const ::trpc::ClientContextPtr& context, const ::trpc::university::stu::Envelopment& request) {
  if (context->GetFuncName().empty()) context->SetFuncName(University_method_names[1][0].data());
  return AsyncUnaryInvoke<::trpc::university::stu::Envelopment, ::trpc::university::stu::Envelopment>(context, request);
}

::trpc::Future<::trpc::university::stu::Envelopment> UniversityServiceProxy::AsyncPutEnvelopment(const ::trpc::ClientContextPtr& context, const ::trpc::university::stu::Envelopment& request) {
  if (context->GetFuncName().empty()) context->SetFuncName(University_method_names[2][0].data());
  return AsyncUnaryInvoke<::trpc::university::stu::Envelopment, ::trpc::university::stu::Envelopment>(context, request);
}

::trpc::Status UniversityServiceProxy::Ping(const ::trpc::ClientContextPtr& context, const ::trpc::university::stu::PingMessage& request) {
  if (context->GetFuncName().empty()) context->SetFuncName(University_method_names[0][0].data());
  return OnewayInvoke<::trpc::university::stu::PingMessage>(context, request);
}

::trpc::Status UniversityServiceProxy::GetEnvelopment(const ::trpc::ClientContextPtr& context, const ::trpc::university::stu::Envelopment& request) {
  if (context->GetFuncName().empty()) context->SetFuncName(University_method_names[1][0].data());
  return OnewayInvoke<::trpc::university::stu::Envelopment>(context, request);
}

::trpc::Status UniversityServiceProxy::PutEnvelopment(const ::trpc::ClientContextPtr& context, const ::trpc::university::stu::Envelopment& request) {
  if (context->GetFuncName().empty()) context->SetFuncName(University_method_names[2][0].data());
  return OnewayInvoke<::trpc::university::stu::Envelopment>(context, request);
}

::trpc::Future<::trpc::university::stu::PingMessage> AsyncUniversityServiceProxy::Ping(const ::trpc::ClientContextPtr& context, const ::trpc::university::stu::PingMessage& request) {
  if (context->GetFuncName().empty()) context->SetFuncName(University_method_names[0][0].data());
  return AsyncUnaryInvoke<::trpc::university::stu::PingMessage, ::trpc::university::stu::PingMessage>(context, request);
}

::trpc::Future<::trpc::university::stu::Envelopment> AsyncUniversityServiceProxy::GetEnvelopment(const ::trpc::ClientContextPtr& context, const ::trpc::university::stu::Envelopment& request) {
  if (context->GetFuncName().empty()) context->SetFuncName(University_method_names[1][0].data());
  return AsyncUnaryInvoke<::trpc::university::stu::Envelopment, ::trpc::university::stu::Envelopment>(context, request);
}

::trpc::Future<::trpc::university::stu::Envelopment> AsyncUniversityServiceProxy::PutEnvelopment(const ::trpc::ClientContextPtr& context, const ::trpc::university::stu::Envelopment& request) {
  if (context->GetFuncName().empty()) context->SetFuncName(University_method_names[2][0].data());
  return AsyncUnaryInvoke<::trpc::university::stu::Envelopment, ::trpc::university::stu::Envelopment>(context, request);
}

} // end namespace stu
} // end namespace university
} // end namespace trpc