//
// This file was generated by trpc_cpp_plugin which is a self-defined pb compiler plugin, do not edit it!!!
// All rights reserved by Tencent Corporation
//

#pragma once

#include "university.pb.h"

#include "trpc/client/rpc_service_proxy.h"
#include "trpc/server/rpc_service_impl.h"

namespace trpc {
namespace university {
namespace stu {

class University : public ::trpc::RpcServiceImpl {
 public:
  University();

  virtual ::trpc::Status Ping(::trpc::ServerContextPtr context, const ::trpc::university::stu::PingMessage* request, ::trpc::university::stu::PingMessage* response);
  virtual ::trpc::Status GetEnvelopment(::trpc::ServerContextPtr context, const ::trpc::university::stu::Envelopment* request, ::trpc::university::stu::Envelopment* response);
  virtual ::trpc::Status PutEnvelopment(::trpc::ServerContextPtr context, const ::trpc::university::stu::Envelopment* request, ::trpc::university::stu::Envelopment* response);
};

class AsyncUniversity : public ::trpc::AsyncRpcServiceImpl {
 public:
  AsyncUniversity();
  
  virtual ::trpc::Future<::trpc::university::stu::PingMessage> Ping(const ::trpc::ServerContextPtr& context, const ::trpc::university::stu::PingMessage* request);
  virtual ::trpc::Future<::trpc::university::stu::Envelopment> GetEnvelopment(const ::trpc::ServerContextPtr& context, const ::trpc::university::stu::Envelopment* request);
  virtual ::trpc::Future<::trpc::university::stu::Envelopment> PutEnvelopment(const ::trpc::ServerContextPtr& context, const ::trpc::university::stu::Envelopment* request);
};

class UniversityServiceProxy : public ::trpc::RpcServiceProxy {
 public:
  virtual ::trpc::Status Ping(const ::trpc::ClientContextPtr& context, const ::trpc::university::stu::PingMessage& request, ::trpc::university::stu::PingMessage* response);
  virtual ::trpc::Future<::trpc::university::stu::PingMessage> AsyncPing(const ::trpc::ClientContextPtr& context, const ::trpc::university::stu::PingMessage& request);
  // oneway, only send
  virtual ::trpc::Status Ping(const ::trpc::ClientContextPtr& context, const ::trpc::university::stu::PingMessage& request);
  virtual ::trpc::Status GetEnvelopment(const ::trpc::ClientContextPtr& context, const ::trpc::university::stu::Envelopment& request, ::trpc::university::stu::Envelopment* response);
  virtual ::trpc::Future<::trpc::university::stu::Envelopment> AsyncGetEnvelopment(const ::trpc::ClientContextPtr& context, const ::trpc::university::stu::Envelopment& request);
  // oneway, only send
  virtual ::trpc::Status GetEnvelopment(const ::trpc::ClientContextPtr& context, const ::trpc::university::stu::Envelopment& request);
  virtual ::trpc::Status PutEnvelopment(const ::trpc::ClientContextPtr& context, const ::trpc::university::stu::Envelopment& request, ::trpc::university::stu::Envelopment* response);
  virtual ::trpc::Future<::trpc::university::stu::Envelopment> AsyncPutEnvelopment(const ::trpc::ClientContextPtr& context, const ::trpc::university::stu::Envelopment& request);
  // oneway, only send
  virtual ::trpc::Status PutEnvelopment(const ::trpc::ClientContextPtr& context, const ::trpc::university::stu::Envelopment& request);
};

class AsyncUniversityServiceProxy : public ::trpc::RpcServiceProxy {
 public:
  ::trpc::Future<::trpc::university::stu::PingMessage> Ping(const ::trpc::ClientContextPtr& context, const ::trpc::university::stu::PingMessage& request);
  // TODO: one-way
  ::trpc::Future<::trpc::university::stu::Envelopment> GetEnvelopment(const ::trpc::ClientContextPtr& context, const ::trpc::university::stu::Envelopment& request);
  // TODO: one-way
  ::trpc::Future<::trpc::university::stu::Envelopment> PutEnvelopment(const ::trpc::ClientContextPtr& context, const ::trpc::university::stu::Envelopment& request);
  // TODO: one-way
};

} // end namespace stu
} // end namespace university
} // end namespace trpc