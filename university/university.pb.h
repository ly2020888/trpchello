// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: university.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_university_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_university_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3015000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3015008 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_university_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_university_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[2]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_university_2eproto;
::PROTOBUF_NAMESPACE_ID::Metadata descriptor_table_university_2eproto_metadata_getter(int index);
namespace trpc {
namespace university {
namespace stu {
class Envelopment;
struct EnvelopmentDefaultTypeInternal;
extern EnvelopmentDefaultTypeInternal _Envelopment_default_instance_;
class PingMessage;
struct PingMessageDefaultTypeInternal;
extern PingMessageDefaultTypeInternal _PingMessage_default_instance_;
}  // namespace stu
}  // namespace university
}  // namespace trpc
PROTOBUF_NAMESPACE_OPEN
template<> ::trpc::university::stu::Envelopment* Arena::CreateMaybeMessage<::trpc::university::stu::Envelopment>(Arena*);
template<> ::trpc::university::stu::PingMessage* Arena::CreateMaybeMessage<::trpc::university::stu::PingMessage>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace trpc {
namespace university {
namespace stu {

// ===================================================================

class PingMessage PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:trpc.university.stu.PingMessage) */ {
 public:
  inline PingMessage() : PingMessage(nullptr) {}
  virtual ~PingMessage();
  explicit constexpr PingMessage(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  PingMessage(const PingMessage& from);
  PingMessage(PingMessage&& from) noexcept
    : PingMessage() {
    *this = ::std::move(from);
  }

  inline PingMessage& operator=(const PingMessage& from) {
    CopyFrom(from);
    return *this;
  }
  inline PingMessage& operator=(PingMessage&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const PingMessage& default_instance() {
    return *internal_default_instance();
  }
  static inline const PingMessage* internal_default_instance() {
    return reinterpret_cast<const PingMessage*>(
               &_PingMessage_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(PingMessage& a, PingMessage& b) {
    a.Swap(&b);
  }
  inline void Swap(PingMessage* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PingMessage* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline PingMessage* New() const final {
    return CreateMaybeMessage<PingMessage>(nullptr);
  }

  PingMessage* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<PingMessage>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const PingMessage& from);
  void MergeFrom(const PingMessage& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PingMessage* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "trpc.university.stu.PingMessage";
  }
  protected:
  explicit PingMessage(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_university_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPingFieldNumber = 1,
  };
  // string ping = 1;
  void clear_ping();
  const std::string& ping() const;
  void set_ping(const std::string& value);
  void set_ping(std::string&& value);
  void set_ping(const char* value);
  void set_ping(const char* value, size_t size);
  std::string* mutable_ping();
  std::string* release_ping();
  void set_allocated_ping(std::string* ping);
  private:
  const std::string& _internal_ping() const;
  void _internal_set_ping(const std::string& value);
  std::string* _internal_mutable_ping();
  public:

  // @@protoc_insertion_point(class_scope:trpc.university.stu.PingMessage)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr ping_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_university_2eproto;
};
// -------------------------------------------------------------------

class Envelopment PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:trpc.university.stu.Envelopment) */ {
 public:
  inline Envelopment() : Envelopment(nullptr) {}
  virtual ~Envelopment();
  explicit constexpr Envelopment(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Envelopment(const Envelopment& from);
  Envelopment(Envelopment&& from) noexcept
    : Envelopment() {
    *this = ::std::move(from);
  }

  inline Envelopment& operator=(const Envelopment& from) {
    CopyFrom(from);
    return *this;
  }
  inline Envelopment& operator=(Envelopment&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Envelopment& default_instance() {
    return *internal_default_instance();
  }
  static inline const Envelopment* internal_default_instance() {
    return reinterpret_cast<const Envelopment*>(
               &_Envelopment_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(Envelopment& a, Envelopment& b) {
    a.Swap(&b);
  }
  inline void Swap(Envelopment* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Envelopment* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Envelopment* New() const final {
    return CreateMaybeMessage<Envelopment>(nullptr);
  }

  Envelopment* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Envelopment>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Envelopment& from);
  void MergeFrom(const Envelopment& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Envelopment* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "trpc.university.stu.Envelopment";
  }
  protected:
  explicit Envelopment(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_university_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kUuidFieldNumber = 1,
    kPlayloadFieldNumber = 2,
  };
  // string uuid = 1;
  void clear_uuid();
  const std::string& uuid() const;
  void set_uuid(const std::string& value);
  void set_uuid(std::string&& value);
  void set_uuid(const char* value);
  void set_uuid(const char* value, size_t size);
  std::string* mutable_uuid();
  std::string* release_uuid();
  void set_allocated_uuid(std::string* uuid);
  private:
  const std::string& _internal_uuid() const;
  void _internal_set_uuid(const std::string& value);
  std::string* _internal_mutable_uuid();
  public:

  // bytes playload = 2;
  void clear_playload();
  const std::string& playload() const;
  void set_playload(const std::string& value);
  void set_playload(std::string&& value);
  void set_playload(const char* value);
  void set_playload(const void* value, size_t size);
  std::string* mutable_playload();
  std::string* release_playload();
  void set_allocated_playload(std::string* playload);
  private:
  const std::string& _internal_playload() const;
  void _internal_set_playload(const std::string& value);
  std::string* _internal_mutable_playload();
  public:

  // @@protoc_insertion_point(class_scope:trpc.university.stu.Envelopment)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr uuid_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr playload_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_university_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// PingMessage

// string ping = 1;
inline void PingMessage::clear_ping() {
  ping_.ClearToEmpty();
}
inline const std::string& PingMessage::ping() const {
  // @@protoc_insertion_point(field_get:trpc.university.stu.PingMessage.ping)
  return _internal_ping();
}
inline void PingMessage::set_ping(const std::string& value) {
  _internal_set_ping(value);
  // @@protoc_insertion_point(field_set:trpc.university.stu.PingMessage.ping)
}
inline std::string* PingMessage::mutable_ping() {
  // @@protoc_insertion_point(field_mutable:trpc.university.stu.PingMessage.ping)
  return _internal_mutable_ping();
}
inline const std::string& PingMessage::_internal_ping() const {
  return ping_.Get();
}
inline void PingMessage::_internal_set_ping(const std::string& value) {
  
  ping_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void PingMessage::set_ping(std::string&& value) {
  
  ping_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:trpc.university.stu.PingMessage.ping)
}
inline void PingMessage::set_ping(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  ping_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:trpc.university.stu.PingMessage.ping)
}
inline void PingMessage::set_ping(const char* value,
    size_t size) {
  
  ping_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:trpc.university.stu.PingMessage.ping)
}
inline std::string* PingMessage::_internal_mutable_ping() {
  
  return ping_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* PingMessage::release_ping() {
  // @@protoc_insertion_point(field_release:trpc.university.stu.PingMessage.ping)
  return ping_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void PingMessage::set_allocated_ping(std::string* ping) {
  if (ping != nullptr) {
    
  } else {
    
  }
  ping_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ping,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:trpc.university.stu.PingMessage.ping)
}

// -------------------------------------------------------------------

// Envelopment

// string uuid = 1;
inline void Envelopment::clear_uuid() {
  uuid_.ClearToEmpty();
}
inline const std::string& Envelopment::uuid() const {
  // @@protoc_insertion_point(field_get:trpc.university.stu.Envelopment.uuid)
  return _internal_uuid();
}
inline void Envelopment::set_uuid(const std::string& value) {
  _internal_set_uuid(value);
  // @@protoc_insertion_point(field_set:trpc.university.stu.Envelopment.uuid)
}
inline std::string* Envelopment::mutable_uuid() {
  // @@protoc_insertion_point(field_mutable:trpc.university.stu.Envelopment.uuid)
  return _internal_mutable_uuid();
}
inline const std::string& Envelopment::_internal_uuid() const {
  return uuid_.Get();
}
inline void Envelopment::_internal_set_uuid(const std::string& value) {
  
  uuid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void Envelopment::set_uuid(std::string&& value) {
  
  uuid_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:trpc.university.stu.Envelopment.uuid)
}
inline void Envelopment::set_uuid(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  uuid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:trpc.university.stu.Envelopment.uuid)
}
inline void Envelopment::set_uuid(const char* value,
    size_t size) {
  
  uuid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:trpc.university.stu.Envelopment.uuid)
}
inline std::string* Envelopment::_internal_mutable_uuid() {
  
  return uuid_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* Envelopment::release_uuid() {
  // @@protoc_insertion_point(field_release:trpc.university.stu.Envelopment.uuid)
  return uuid_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Envelopment::set_allocated_uuid(std::string* uuid) {
  if (uuid != nullptr) {
    
  } else {
    
  }
  uuid_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), uuid,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:trpc.university.stu.Envelopment.uuid)
}

// bytes playload = 2;
inline void Envelopment::clear_playload() {
  playload_.ClearToEmpty();
}
inline const std::string& Envelopment::playload() const {
  // @@protoc_insertion_point(field_get:trpc.university.stu.Envelopment.playload)
  return _internal_playload();
}
inline void Envelopment::set_playload(const std::string& value) {
  _internal_set_playload(value);
  // @@protoc_insertion_point(field_set:trpc.university.stu.Envelopment.playload)
}
inline std::string* Envelopment::mutable_playload() {
  // @@protoc_insertion_point(field_mutable:trpc.university.stu.Envelopment.playload)
  return _internal_mutable_playload();
}
inline const std::string& Envelopment::_internal_playload() const {
  return playload_.Get();
}
inline void Envelopment::_internal_set_playload(const std::string& value) {
  
  playload_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void Envelopment::set_playload(std::string&& value) {
  
  playload_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:trpc.university.stu.Envelopment.playload)
}
inline void Envelopment::set_playload(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  playload_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:trpc.university.stu.Envelopment.playload)
}
inline void Envelopment::set_playload(const void* value,
    size_t size) {
  
  playload_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:trpc.university.stu.Envelopment.playload)
}
inline std::string* Envelopment::_internal_mutable_playload() {
  
  return playload_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* Envelopment::release_playload() {
  // @@protoc_insertion_point(field_release:trpc.university.stu.Envelopment.playload)
  return playload_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Envelopment::set_allocated_playload(std::string* playload) {
  if (playload != nullptr) {
    
  } else {
    
  }
  playload_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), playload,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:trpc.university.stu.Envelopment.playload)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace stu
}  // namespace university
}  // namespace trpc

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_university_2eproto
